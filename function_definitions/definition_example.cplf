FUNCTION_START
#name
#return_type
#param1_type #param1_name
#param2_type #param2_name
#param3_type #param3_name
...
CODE_START
#code
CODE_END
FUNCTION_END

FUNCTION_START
#name
#return_type
#param1_type #param1_name
#param2_type #param2_name
....
CODE_START
#code
CODE_END
FUNCTION_END

/* Structure might be changed (maybe for simpler overriding of same named functions),
must think how it works with function injection, name and return types must be required, functions are not checked for errors,
only parameter types and return types (as function implementations are c++ codes that must be compiled in c++, we only check for errors of cpl language),
return types must be datatypes of cpl language, and later converted to c++ type (need to think about how return type will map in these function cases, for example:
cpl type integer can be both int or long long in c++, based on how we handle the conversion, if no optimization is required, will always use long longs, could be 
optimized at a later time, file extension should be cplf (Competitive Programming Language Functions)
*/